'''HW11
!!!Work will NOT be graded without your anthenticity statement!!!

Name: Zach Dayton

Authenticity: I accomplished this homework alone, without working with any other students.

Book Problems (note that TF number 5 is omitted)
TF
1. F
2. T
3. F
4. F
5. F
6. F
7. T
8. F
9. T
10.F

MC
1. B
2. D
3. D
4. C
5. D
6. A
7. D
8. D
9. C
10.B

Discussion
1a. [2, 1, 4, 3, 'c', 'a', 'b']
1b. [2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 'c', 'a', 'b', 'c', 'a', 'b']
1c. 1
1d. [1, 4]
1e. TypeError: can only concatenate list (not "str") to list
2a. s1 = [1, 4, 3], s2 = ['c', 'a', 'b']
2b. s1 = [1, 3, 4], s2 = ['c', 'a', 'b']
2c. s1 = [1, 3, 4, [2]], s2 = ['c', 'a', 'b']
2d. s1 = [2, 1, 3], s2 = ['c', 'a', 'b']
2e. s1 = [2, 1, 4, 3], s2 = ['c', 'a', 'd', 'b']
'''
from random import *
from graphics import *

'''For problem 15, use tuples to represent a card.
The tuple should have a value 1 to 13 for the value of the card and a one
character string, (c, d, h, or s) to represent the suit.
So dealCard returns a tuple for each card, e.g. (1,'s').
Deal and print 10 five-card hands to test your class.'''

def main():
    deck = Deck()
    deck.shuffle()
    for i in range(10):
        print(deck.dealCard())
        
    print('There are '+deck.cardsLeft()+' cards remaining in the deck.')

class Deck:
    def __init__(self):
        #constructor
        self.deck = []
        for suit in ('d','h','c','s'):
            for rank in range(1,14):
                self.deck.append((suit,rank))
        #print(len(self.deck))
    def shuffle(self):
        shuffledDeck= []
        for i in range(len(self.deck)):
            newOrder = randrange(len(self.deck))
            shuffledDeck.append(self.deck.pop(newOrder))
        self.deck = shuffledDeck
        #print(len(self.deck))
    def dealCard(self):
        suit,rank = self.deck.pop(0)
    
        if suit == 'd':
            realSuit = 'Diamonds'
        elif suit == 'h':
            realSuit = 'Hearts'
        elif suit == 'c':
            realSuit = 'Clubs'
        else:
            realSuit = 'Spades'

        if rank == 1:
            realRank = 'Ace'
        if rank == 2:
            realRank = 'Two'
        if rank == 3:
            realRank = 'Three'
        if rank == 4:
            realRank = 'Four'
        if rank == 5:
            realRank = 'Five'
        if rank == 6:
            realRank = 'Six'
        if rank == 7:
            realRank = 'Seven'
        if rank == 8:
            realRank = 'Eight'
        if rank == 9:
            realRank = 'Nine'
        if rank == 10:
            realRank = 'Ten'
        if rank == 11:
            realRank = 'Jack'
        if rank == 12:
            realRank = 'Queen'
        if rank == 13:
            realRank = 'King'
        return realRank+' of '+realSuit

    def cardsLeft(self):
        return (str(len(self.deck)))

main()
