'''HW10
!!!Work will NOT be graded without your anthenticity statement!!!

Name: Zach Dayton

Authenticity: I accomplished this homework alone, without working with any other students.

Book Problems (note that TF number 5 is omitted)
TF
1. T
2. F
3. F
4. F
6. T
7. F
8. T
9. F
10.F

MC
1. A
2. A
3. D
4. B
5. C
6. B
7. A (or B?)
8. A
9. C
10.B and C

Discussion
1. Instance variables are only contained in the __init__ method, unless they are 'saved'.
Regular function variables are available throughout the function; but aren't usable beyond that function
unless saved and returned.
2a. A method is simply a function that belongs to a specific class.
2b. An instance variable is a variable passed into the __init__ method when the class
is first called. 
2c. A constructor is a method such as __init__ that 'constructs' the class.
2d. An accessor is used to see but not edit an object.
2e. A mutator is a method that lets you change the object's state.
3.
Clowning around now.
Creating a Bozo from: 3
Creating a Bozo from: 4
Clowning: 3
18
9
Clowning: 2
12
Clowning: 8
64
16
'''
from random import *
from graphics import *

def main():
    #prob8() # Problem 8
    '''Prob11: write code here, per the instructions in problem 11, to
    test the class you have written. Note that rank is an integer from
    1 to 13 and suit is a one-character string. Only in the __str__ are
    the names like Ace and King and the full name of the suit, like
    Spades and Clubs, used. Everywhere else, the rank is a number and
    the suit is a one-character string. Write the Card class below the
    prob8 definition'''
    # Problem 11
    prob11()

def prob11():
    n = eval(input('How many cards? '))
    for i in range(n):
        card = Card(randint(1,13),randint(0,3))
        print(card)
    
# Problem 8
def prob8():
    '''Graphics program to roll a pair of dice. Uses custom widgets
    Button and DieView.'''

    # create the application window
    win = GraphWin("Dice Roller")
    win.setCoords(0, 0, 10, 10)
    win.setBackground("green2")

    # Draw the interface widgets
    die1 = DieView(win, Point(3,7), 2)
    die2 = DieView(win, Point(7,7), 2)
    rollButton = Button(win, Point(5,4.5), 6, 1, "Roll Dice")
    rollButton.activate()
    quitButton = Button(win, Point(5,1), 2, 1, "Quit")

    # Event loop
    pt = win.getMouse()
    while not quitButton.clicked(pt):
        if rollButton.clicked(pt):
            newcolor = color_rgb(randint(0,255),randint(0,255),randint(0,255))
            value1 = randrange(1,7)
            die1.setValue(value1)
            die1.setColor(newcolor)
            value2 = randrange(1,7)
            die2.setValue(value2)
            die2.setColor(newcolor)
            quitButton.activate()
        pt = win.getMouse()

    # close up shop
    win.close()

class Card:
    ''' Your code to define the Card class goes here'''
    def __init__(self, rank, suit):
        self.suit = suit
        self.rank = rank
        self.numlst = ['','Ace','Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Jack','Queen','King']
        self.lstrank = self.numlst[rank]
    def __str__(self):
        return self.getRank()+' of '+self.getSuit()+'!'+' and your Black Jack value is: '+self.getBJValue()
    def getSuit(self):
        if self.suit == 0:
            return 'Clubs'
        elif self.suit == 1:
            return 'Hearts'
        elif self.suit == 2:
            return 'Spades'
        else:
            return 'Diamonds'
    def getRank(self):
        if self.lstrank == 11 or self.lstrank == 12 or self.lstrank == 13:
            return 13
        else:
            return self.lstrank
    def getBJValue(self):
        if 2 >= self.rank <= 9:
            return str(self.rank)
        elif 10 >= self.rank <= 13:
            return '10'
        else:
            return '1'
    
class DieView:
    """ DieView is a widget that displays a graphical representation
    of a standard six-sided die."""
    
    def __init__(self, win, center, size):
        """Create a view of a die, e.g.:
           d1 = GDie(myWin, Point(40,50), 20)
        creates a die centered at (40,50) having sides
        of length 20."""

        # first define some standard values
        self.win = win            # save this for drawing pips later
        self.background = "white" # color of die face
        self.foreground = 'red'
        self.psize = 0.1 * size   # radius of each pip
        hsize = size / 2.0        # half the size of the die
        offset = 0.6 * hsize      # distance from center to outer pips

        # create a square for the face
        cx, cy = center.getX(), center.getY()
        p1 = Point(cx-hsize, cy-hsize)
        p2 = Point(cx+hsize, cy+hsize)
        rect = Rectangle(p1,p2)
        rect.draw(win)
        rect.setFill(self.background)

        # Create 7 circles for standard pip locations
        self.pip1 = self.__makePip(cx-offset, cy-offset)
        self.pip2 = self.__makePip(cx-offset, cy)
        self.pip3 = self.__makePip(cx-offset, cy+offset)
        self.pip4 = self.__makePip(cx, cy)
        self.pip5 = self.__makePip(cx+offset, cy-offset)
        self.pip6 = self.__makePip(cx+offset, cy)
        self.pip7 = self.__makePip(cx+offset, cy+offset)
        
        # Draw an initial value
        self.setValue(1)

    def __makePip(self, x, y):
        "Internal helper method to draw a pip at (x,y)"
        pip = Circle(Point(x,y), self.psize)
        pip.setFill(self.background)
        pip.setOutline(self.background)
        pip.draw(self.win)
        return pip

        

    def setValue(self, value):
        "Set this die to display value."
        # turn all pips off
        self.pip1.setFill(self.background)
        self.pip2.setFill(self.background)
        self.pip3.setFill(self.background)
        self.pip4.setFill(self.background)
        self.pip5.setFill(self.background)
        self.pip6.setFill(self.background)
        self.pip7.setFill(self.background)
        #save value
        self.value = value
        # turn correct pips on        
        if value == 1:
            self.pip4.setFill(self.foreground)
        elif value == 2:
            self.pip1.setFill(self.foreground)
            self.pip7.setFill(self.foreground)
        elif value == 3:
            self.pip1.setFill(self.foreground)
            self.pip7.setFill(self.foreground)        
            self.pip4.setFill(self.foreground)
        elif value == 4:
            self.pip1.setFill(self.foreground)
            self.pip3.setFill(self.foreground)
            self.pip5.setFill(self.foreground)
            self.pip7.setFill(self.foreground)
        elif value == 5:
            self.pip1.setFill(self.foreground)
            self.pip3.setFill(self.foreground)
            self.pip4.setFill(self.foreground)
            self.pip5.setFill(self.foreground)
            self.pip7.setFill(self.foreground)
        else:
            self.pip1.setFill(self.foreground)
            self.pip2.setFill(self.foreground)
            self.pip3.setFill(self.foreground)
            self.pip5.setFill(self.foreground)
            self.pip6.setFill(self.foreground)
            self.pip7.setFill(self.foreground)

    def setColor(self,newcolor):
        self.foreground = newcolor
        self.setValue(self.value)

class Button:

    """A button is a labeled rectangle in a window.
    It is activated or deactivated with the activate()
    and deactivate() methods. The clicked(p) method
    returns true if the button is active and p is inside it."""

    def __init__(self, win, center, width, height, label):
        """ Creates a rectangular button, eg:
        qb = Button(myWin, centerPoint, width, height, 'Quit') """ 

        w,h = width/2.0, height/2.0
        x,y = center.getX(), center.getY()
        self.xmax, self.xmin = x+w, x-w
        self.ymax, self.ymin = y+h, y-h
        p1 = Point(self.xmin, self.ymin)
        p2 = Point(self.xmax, self.ymax)
        self.rect = Rectangle(p1,p2)
        self.rect.setFill('lightgray')
        self.rect.draw(win)
        self.label = Text(center, label)
        self.label.draw(win)
        self.deactivate()

    def clicked(self, p):
        "Returns true if button active and p is inside"
        return (self.active and
                self.xmin <= p.getX() <= self.xmax and
                self.ymin <= p.getY() <= self.ymax)

    def getLabel(self):
        "Returns the label string of this button."
        return self.label.getText()

    def activate(self):
        "Sets this button to 'active'."
        self.label.setFill('black')
        self.rect.setWidth(2)
        self.active = True

    def deactivate(self):
        "Sets this button to 'inactive'."
        self.label.setFill('darkgrey')
        self.rect.setWidth(1)
        self.active = False

main()
